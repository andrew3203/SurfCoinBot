package handler

import (
	"surf_bot/internal/domain"
	"surf_bot/internal/repository"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramHandler struct {
	Repo        *repository.UserRepository
	SecretCoach string
	Bot         *tgbotapi.BotAPI
}

func NewTelegramHandler(repo *repository.UserRepository, bot *tgbotapi.BotAPI, secret string) *TelegramHandler {
	return &TelegramHandler{
		Repo:        repo,
		SecretCoach: secret,
		Bot:         bot,
	}
}

func (h *TelegramHandler) HandleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text
	name := update.Message.From.FirstName
	username := update.Message.From.UserName,

	switch {
	case text == "/start":
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /athlete –µ—Å–ª–∏ —Ç—ã —Å–ø–æ—Ä—Ç—Å–º–µ–Ω, –∏–ª–∏ /coach <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á> –µ—Å–ª–∏ —Ç—ã —Ç—Ä–µ–Ω–µ—Ä."))
		} else if user.Role == domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç—Ä–µ–Ω–µ—Ä "+user.Name+"!"))
		} else {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üëã –ü—Ä–∏–≤–µ—Ç, "+user.Name+"! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω."))
		}

	case text == "/athlete":
		err := h.Repo.RegisterUser(&domain.User{ID: chatID, Name: name, Role: domain.RoleAthlete, Username: username})
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error()))
		} else {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω."))
		}

	case len(text) > 7 && text[:7] == "/coach ":
		providedKey := text[7:]
		if providedKey != h.SecretCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á."))
			return
		}

		err := h.Repo.RegisterUser(&domain.User{ID: chatID, Name: name, Role: domain.RoleCoach, Username: username})
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error()))
		} else {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä."))
		}
	case text == "/ranking":
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start."))
			return
		}

		ranking, err := h.Repo.GetRanking()
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: "+err.Error()))
			return
		}

		if len(ranking) == 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."))
			return
		}

		msg := "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n"
		var userRankText string

		for i, r := range ranking {
			line := fmt.Sprintf("%d. %s ‚Äî %d –±–∞–ª–ª–æ–≤\n", i+1, r.Name, r.Score)
			msg += line

			if r.UserID == chatID {
				userRankText = fmt.Sprintf("\nüìç –¢—ã –Ω–∞ %d –º–µ—Å—Ç–µ —Å %d –±–∞–ª–ª–∞–º–∏.", i+1, r.Score)
			}
		}
		msg += userRankText
		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
	
	case strings.HasPrefix(text, "/request "):
		args := strings.SplitN(text[len("/request "):], " ", 2)
		if len(args) < 2 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /request <–±–∞–ª–ª—ã> <–ø—Ä–∏—á–∏–Ω–∞>"))
			return
		}

		amount, err := strconv.Atoi(args[0])
		if err != nil || amount <= 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ –±–æ–ª—å—à–µ –Ω—É–ª—è."))
			return
		}
		reason := strings.TrimSpace(args[1])
		if reason == "" {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞."))
			return
		}

		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleAthlete {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–∞–ª–ª—ã."))
			return
		}

		err = h.Repo.CreatePendingRequest(chatID, amount, reason)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
			return
		}

		msg := fmt.Sprintf("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ %d –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É.", amount)
		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
	case text == "/pending":
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
			return
		}

		requests, err := h.Repo.GetPendingRequests()
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: "+err.Error()))
			return
		}

		if len(requests) == 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."))
			return
		}

		msg := "üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
		for _, req := range requests {
			line := fmt.Sprintf("ID: %d | üë§ %s | ‚ûï %d –±–∞–ª–ª–æ–≤\nüìé %s\n\n", req.ID, req.Name, req.Amount, req.Reason)
			msg += line
		}
		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
	
	case strings.HasPrefix(text, "/approve "):
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
			return
		}

		idStr := strings.TrimSpace(strings.TrimPrefix(text, "/approve "))
		id, err := strconv.Atoi(idStr)
		if err != nil || id <= 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
			return
		}

		err = h.Repo.ApproveRequest(id)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
			return
		}

		h.Bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–ø—Ä–æ—Å #%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.", id)))
	
	case strings.HasPrefix(text, "/give "):
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."))
			return
		}

		args := strings.SplitN(strings.TrimPrefix(text, "/give "), " ", 3)
		if len(args) < 3 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /give <–±–∞–ª–ª—ã> @–∏–º—è <–ø—Ä–∏—á–∏–Ω–∞>"))
			return
		}

		amount, err := strconv.Atoi(args[0])
		if err != nil || amount <= 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤."))
			return
		}

		username := strings.TrimPrefix(args[1], "@")
		reason := args[2]

		err = h.Repo.GivePoints(username, amount, reason)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error()))
			return
		}

		msg := fmt.Sprintf("‚úÖ %d –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @%s.\nüìé %s", amount, username, reason)
		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
	
	case text == "/athletes":
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
			return
		}

		athletes, err := h.Repo.ListAthletes()
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: "+err.Error()))
			return
		}

		if len(athletes) == 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."))
			return
		}

		msg := "üìã –°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n\n"
		for _, a := range athletes {
			msg += fmt.Sprintf("‚Ä¢ @%s (%s)\n", a.Username, a.Name)
		}

		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
	
	case strings.HasPrefix(text, "/reject "):
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
			return
		}

		idStr := strings.TrimSpace(strings.TrimPrefix(text, "/reject "))
		id, err := strconv.Atoi(idStr)
		if err != nil || id <= 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
			return
		}

		err = h.Repo.RejectRequest(id)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
			return
		}

		h.Bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å #%d –æ—Ç–∫–ª–æ–Ω—ë–Ω.", id)))

	case strings.HasPrefix(text, "/reject "):
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleCoach {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
			return
		}

		idStr := strings.TrimSpace(strings.TrimPrefix(text, "/reject "))
		id, err := strconv.Atoi(idStr)
		if err != nil || id <= 0 {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
			return
		}

		fromID, err := h.Repo.RejectRequest(id)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
			return
		}

		// –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—É
		h.Bot.Send(tgbotapi.NewMessage(fromID, fmt.Sprintf("üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å #%d –Ω–∞ –±–∞–ª–ª—ã –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º.", id)))

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
		h.Bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å #%d –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.", id)))

	case strings.HasPrefix(text, "/history"):
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
			return
		}

		args := strings.Fields(text)

		var targetID int64
		var targetName string

		if len(args) == 1 {
			// —Å–ø–æ—Ä—Ç—Å–º–µ–Ω —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é
			if user.Role != domain.RoleAthlete {
				h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –¢—Ä–µ–Ω–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å @username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞."))
				return
			}
			targetID = chatID
			targetName = user.Username
		} else if len(args) == 2 && user.Role == domain.RoleCoach {
			username := strings.TrimPrefix(args[1], "@")
			targetUser, err := h.Repo.GetUserByUsername(username)
			if err != nil || targetUser == nil || targetUser.Role != domain.RoleAthlete {
				h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –°–ø–æ—Ä—Ç—Å–º–µ–Ω —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω."))
				return
			}
			targetID = targetUser.ID
			targetName = targetUser.Username
		} else {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /history –∏–ª–∏ /history @username (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞)"))
			return
		}

		history, err := h.Repo.GetUserHistory(targetID)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: "+err.Error()))
			return
		}

		if len(history) == 0 {
			msg := "üì≠ –ù–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."
			if user.Role == domain.RoleCoach && targetID != chatID {
				msg = fmt.Sprintf("üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.", targetName)
			}
			h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
			return
		}

		msg := "üìú –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:\n\n"
		for _, entry := range history {
			msg += fmt.Sprintf("‚Ä¢ ‚ûï %d –±–∞–ª–ª–æ–≤ ‚Äî %s\n", entry.Amount, entry.Reason)
		}

		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))
	
	case text == "/my_score":
		user, _ := h.Repo.GetUserByID(chatID)
		if user == nil || user.Role != domain.RoleAthlete {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º."))
			return
		}

		score, err := h.Repo.GetUserScore(chatID)
		if err != nil {
			h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
			return
		}

		msg := fmt.Sprintf("üèÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: %d –±–∞–ª–ª–æ–≤", score)
		h.Bot.Send(tgbotapi.NewMessage(chatID, msg))

	default:
		h.Bot.Send(tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start."))
	}
}
