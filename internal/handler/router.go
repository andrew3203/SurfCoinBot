// internal/handler/router.go
package handler

import (
	"fmt"
	"strconv"
	"strings"

	"surf_bot/internal/domain"
	"surf_bot/internal/util"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func isCommand(text, cmd string) bool {
	return strings.TrimSpace(text) == cmd
}

func (h *TelegramHandler) HandleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	user, _ := h.Repo.GetUserByID(chatID)

	switch {
	case isCommand(text, "/start"):
		h.handleStart(chatID, user)

	case isCommand(text, "/athlete"):
		h.handleAthlete(chatID, update)

	case strings.HasPrefix(text, "/coach "):
		h.handleCoach(chatID, update)

	case isCommand(text, "/ranking"):
		h.handleRanking(chatID, user)

	case strings.HasPrefix(text, "/request"):
		h.handleRequest(chatID, text, user)

	case isCommand(text, "/pending"):
		h.handlePending(chatID, user)

	case strings.HasPrefix(text, "/approve "):
		h.handleApprove(chatID, text, user)

	case strings.HasPrefix(text, "/give "):
		h.handleGive(chatID, text, user)

	case isCommand(text, "/athletes"):
		h.handleAthletes(chatID, user)

	case strings.HasPrefix(text, "/reject "):
		h.handleReject(chatID, text, user)

	case strings.HasPrefix(text, "/history"):
		h.handleHistory(chatID, text, user)

	case isCommand(text, "/my_score"):
		h.handleMyScore(chatID, user)

	default:
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start."))
	}
}

func (h *TelegramHandler) handleStart(chatID int64, user *domain.User) {
	if user == nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
			"üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /athlete –µ—Å–ª–∏ —Ç—ã —Å–ø–æ—Ä—Ç—Å–º–µ–Ω, –∏–ª–∏ /coach <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á> –µ—Å–ª–∏ —Ç—ã —Ç—Ä–µ–Ω–µ—Ä."))
	} else if user.Role == domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
			fmt.Sprintf("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç—Ä–µ–Ω–µ—Ä %s!", user.Name)))
	} else {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
			fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %s! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω.", user.Name)))
	}
}

func (h *TelegramHandler) handleAthlete(chatID int64, update tgbotapi.Update) {
	name := update.Message.From.FirstName
	username := update.Message.From.UserName
	err := h.Repo.RegisterUser(&domain.User{
		ID:       chatID,
		Name:     name,
		Username: username,
		Role:     domain.RoleAthlete,
	})
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error()))
	} else {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω."))
	}
}

func (h *TelegramHandler) handleCoach(chatID int64, update tgbotapi.Update) {
	providedKey := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/coach "))
	if providedKey != h.SecretCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á."))
		return
	}
	name := update.Message.From.FirstName
	username := update.Message.From.UserName
	err := h.Repo.RegisterUser(&domain.User{
		ID:       chatID,
		Name:     name,
		Username: username,
		Role:     domain.RoleCoach,
	})
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error()))
	} else {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä."))
	}
}

// handleRanking sends the leaderboard to the user.
func (h *TelegramHandler) handleRanking(chatID int64, user *domain.User) {
	if user == nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start."))
		return
	}

	ranking, err := h.Repo.GetRanking()
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: "+err.Error()))
		return
	}

	if len(ranking) == 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."))
		return
	}

	msg := "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n"
	var userRankText string

	for i, r := range ranking {
		msg += fmt.Sprintf("%d. %s (@%s) ‚Äî %d –±–∞–ª–ª–æ–≤\n", i+1, r.Name, r.Username, r.Score)
		if r.UserID == chatID {
			userRankText = fmt.Sprintf("\nüìç –¢—ã –Ω–∞ %d –º–µ—Å—Ç–µ —Å %d –±–∞–ª–ª–∞–º–∏.", i+1, r.Score)
		}
	}

	msg += userRankText
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

// handleRequest processes an athlete's points request.
func (h *TelegramHandler) handleRequest(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleAthlete {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–∞–ª–ª—ã."))
		return
	}

	// Parse command: /request <amount> <reason>
	parts := strings.SplitN(text, " ", 3)
	if len(parts) < 3 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /request <–±–∞–ª–ª—ã> <–ø—Ä–∏—á–∏–Ω–∞>"))
		return
	}

	amount, err := strconv.Atoi(parts[1])
	if err != nil || amount <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ –±–æ–ª—å—à–µ –Ω—É–ª—è."))
		return
	}

	reason := strings.TrimSpace(parts[2])
	if reason == "" {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞."))
		return
	}

	err = h.Repo.CreatePendingRequest(chatID, amount, reason)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ %d –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É.", amount)))
}

// handlePending lists all pending requests for the coach.
func (h *TelegramHandler) handlePending(chatID int64, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	requests, err := h.Repo.GetPendingRequests()
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: "+err.Error()))
		return
	}

	if len(requests) == 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."))
		return
	}

	msg := "üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
	for _, req := range requests {
		msg += fmt.Sprintf("ID: %d | üë§ %s (@%s) | ‚ûï %d –±–∞–ª–ª–æ–≤\nüìé %s\n\n",
			req.ID, req.Name, req.Username, req.Amount, req.Reason)
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

// Approves a pending point request
func (h *TelegramHandler) handleApprove(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	idStr := strings.TrimSpace(strings.TrimPrefix(text, "/approve "))
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
		return
	}

	err = h.Repo.ApproveRequest(id)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–ø—Ä–æ—Å #%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.", id)))
}

// Gives points directly to an athlete
func (h *TelegramHandler) handleGive(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."))
		return
	}

	args := strings.SplitN(strings.TrimPrefix(text, "/give "), " ", 3)
	if len(args) < 3 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /give <–±–∞–ª–ª—ã> @–∏–º—è <–ø—Ä–∏—á–∏–Ω–∞>"))
		return
	}

	amount, err := strconv.Atoi(args[0])
	if err != nil || amount <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤."))
		return
	}

	username := strings.TrimPrefix(args[1], "@")
	reason := strings.TrimSpace(args[2])

	err = h.Repo.GivePoints(username, amount, reason)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	msg := fmt.Sprintf("‚úÖ %d –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @%s.\nüìé %s", amount, username, reason)
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

// Lists all athletes for the coach
func (h *TelegramHandler) handleAthletes(chatID int64, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	athletes, err := h.Repo.ListAthletes()
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: "+err.Error()))
		return
	}

	if len(athletes) == 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üì≠ –°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."))
		return
	}

	msg := "üìã –°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n\n"
	for _, a := range athletes {
		msg += fmt.Sprintf("‚Ä¢ @%s (%s)\n", a.Username, a.Name)
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

func (h *TelegramHandler) handleReject(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	idStr := strings.TrimSpace(strings.TrimPrefix(text, "/reject "))
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
		return
	}

	fromID, err := h.Repo.RejectRequest(id)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
		return
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—É
	util.SafeSend(h.Bot, tgbotapi.NewMessage(fromID, fmt.Sprintf("üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å #%d –Ω–∞ –±–∞–ª–ª—ã –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º.", id)))

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å #%d –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.", id)))
}

func (h *TelegramHandler) handleHistory(chatID int64, text string, user *domain.User) {
	if user == nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
		return
	}

	args := strings.Fields(text)
	var targetID int64
	var targetName string

	if len(args) == 1 {
		if user.Role != domain.RoleAthlete {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –¢—Ä–µ–Ω–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å @username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞."))
			return
		}
		targetID = chatID
		targetName = user.Username
	} else if len(args) == 2 && user.Role == domain.RoleCoach {
		username := strings.TrimPrefix(args[1], "@")
		targetUser, err := h.Repo.GetUserByUsername(username)
		if err != nil || targetUser == nil || targetUser.Role != domain.RoleAthlete {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –°–ø–æ—Ä—Ç—Å–º–µ–Ω —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω."))
			return
		}
		targetID = targetUser.ID
		targetName = targetUser.Username
	} else {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /history –∏–ª–∏ /history @username (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞)"))
		return
	}

	history, err := h.Repo.GetUserHistory(targetID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: "+err.Error()))
		return
	}

	if len(history) == 0 {
		msg := "üì≠ –ù–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."
		if user.Role == domain.RoleCoach && targetID != chatID {
			msg = fmt.Sprintf("üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.", targetName)
		}
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
		return
	}

	msg := "üìú –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:\n\n"
	for _, entry := range history {
		msg += fmt.Sprintf("‚Ä¢ ‚ûï %d –±–∞–ª–ª–æ–≤ ‚Äî %s\n", entry.Amount, entry.Reason)
	}
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

func (h *TelegramHandler) handleMyScore(chatID int64, user *domain.User) {
	if user == nil || user.Role != domain.RoleAthlete {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º."))
		return
	}

	score, err := h.Repo.GetUserScore(chatID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		return
	}

	msg := fmt.Sprintf("üèÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: %d –±–∞–ª–ª–æ–≤", score)
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}
