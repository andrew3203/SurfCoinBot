// internal/handler/router.go
package handler

import (
	"fmt"
	"strconv"
	"strings"

	"surf_bot/internal/domain"
	"surf_bot/internal/util"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func isCommand(text, cmd string) bool {
	return strings.TrimSpace(text) == cmd
}

func (h *TelegramHandler) HandleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	user, _ := h.Repo.GetUserByID(chatID)

	switch {
	case strings.HasPrefix(text, "/start"):
		args := strings.TrimSpace(strings.TrimPrefix(text, "/start"))
    	h.handleStart(chatID, user, args, update.Message.From)

	case isCommand(text, "/athlete"):
		h.handleAthlete(chatID, update)

	case strings.HasPrefix(text, "/coach"):
		h.handleCoach(chatID, update)

	case strings.HasPrefix(text, "/ranking"):
		h.handleRanking(chatID, user, text)

	case strings.HasPrefix(text, "/request"):
		h.handleRequest(chatID, text, user)

	case strings.HasPrefix(text, "/pending"):
		h.handlePending(chatID, user, text)

	case strings.HasPrefix(text, "/approve"):
		h.handleApprove(chatID, text, user)

	case strings.HasPrefix(text, "/give"):
		h.handleGive(chatID, text, user)

	case strings.HasPrefix(text, "/athletes"):
		h.handleAthletes(chatID, user, text)

	case strings.HasPrefix(text, "/reject"):
		h.handleReject(chatID, text, user)

	case strings.HasPrefix(text, "/history"):
		h.handleHistory(chatID, text, user)

	case isCommand(text, "/my_score"):
		h.handleMyScore(chatID, user)
	
	case isCommand(text, "/teams"):
		h.handleTeams(chatID, user)
	
	case strings.HasPrefix(text, "/invite_link"):
		h.handleInviteLink(chatID, text, user)
	
	case strings.HasPrefix(text, "/create_team"):
		h.handleCreateTeam(chatID, text, user)

	case strings.HasPrefix(text, "/delete_team"):
		h.handleDeleteTeam(chatID, text, user)

	case strings.HasPrefix(text, "/assign_team"):
		h.handleAssignTeam(chatID, text, user)

	default:
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start."))
	}
}

func (h *TelegramHandler) SetBotCommands() error {
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
		{Command: "athlete", Description: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω"},
		{Command: "coach", Description: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä"},
		{Command: "ranking", Description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã"},
		{Command: "request", Description: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–ª—ã: /request <–±–∞–ª–ª—ã> <–ø—Ä–∏—á–∏–Ω–∞>"},
		{Command: "pending", Description: "–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"},
		{Command: "approve", Description: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å: /approve <id>"},
		{Command: "reject", Description: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: /reject <id>"},
		{Command: "give", Description: "–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã: /give @username <–±–∞–ª–ª—ã> <–ø—Ä–∏—á–∏–Ω–∞>"},
		{Command: "athletes", Description: "–°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤"},
		{Command: "history", Description: "–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏–ª–∏ /history @username"},
		{Command: "my_score", Description: "–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"},
		{Command: "create_team", Description: "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: /create_team <–Ω–∞–∑–≤–∞–Ω–∏–µ>"},
		{Command: "delete_team", Description: "–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: /delete_team <–Ω–∞–∑–≤–∞–Ω–∏–µ>"},
		{Command: "assign_team", Description: "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É: /assign_team @username <team_id>"},
		{Command: "teams", Description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"},
		{Command: "invite_link", Description: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É: /invite_link <team_id>"},

	}

	cfg := tgbotapi.NewSetMyCommands(commands...)
	_, err := h.Bot.Request(cfg)
	return err
}

func (h *TelegramHandler) handleStart(chatID int64, user *domain.User, args string, from *tgbotapi.User) {
	if user == nil {
		if strings.HasPrefix(args, "team_") {
			teamIDStr := strings.TrimPrefix(args, "team_")
			teamID, err := strconv.Atoi(teamIDStr)
			if err == nil && teamID > 0 {
				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã
				team, err := h.Repo.GetTeamByID(teamID)
				if err == nil {
					newUser := &domain.User{
						ID:       chatID,
						Name:     from.FirstName,
						Username: from.UserName,
						Role:     domain.RoleAthlete,
					}
					err = h.Repo.RegisterUser(newUser)
					if err == nil {
						_ = h.Repo.AssignUserToTeam(chatID, teamID)
						util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
							fmt.Sprintf("‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ '%s'.", team.Name)))
						return
					}
				}
			}

			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
				"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."))
			return
		}

		msg := "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SurfCoinBot.\n\n" +
			"–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ—é —Ä–æ–ª—å:\n" +
			"‚Ä¢ /athlete ‚Äî –µ—Å–ª–∏ —Ç—ã —Å–ø–æ—Ä—Ç—Å–º–µ–Ω\n" +
			"‚Ä¢ /coach <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á> ‚Äî –µ—Å–ª–∏ —Ç—ã —Ç—Ä–µ–Ω–µ—Ä\n\n" +
			"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã."
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
		return
	}

	// —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
	switch user.Role {
	case domain.RoleAthlete:
		msg := "üëã –ü—Ä–∏–≤–µ—Ç, " + user.Name + "! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω.\n\n" +
			"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"‚Ä¢ /request <–±–∞–ª–ª—ã> <–ø—Ä–∏—á–∏–Ω–∞> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–ª–ª—ã\n" +
			"‚Ä¢ /my_score ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å—á—ë—Ç\n" +
			"‚Ä¢ /ranking ‚Äî –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥\n" +
			"‚Ä¢ /history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π\n"
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))

	case domain.RoleCoach:
		msg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç—Ä–µ–Ω–µ—Ä " + user.Name + "!\n\n" +
			"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"‚Ä¢ /pending ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n" +
			"‚Ä¢ /approve <id> ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n" +
			"‚Ä¢ /reject <id> ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n" +
			"‚Ä¢ /give <–±–∞–ª–ª—ã> @username <–ø—Ä–∏—á–∏–Ω–∞> ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –≤—Ä—É—á–Ω—É—é\n" +
			"‚Ä¢ /athletes ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤\n" +
			"‚Ä¢ /ranking ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
			"‚Ä¢ /history @username ‚Äî –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞\n" +
			"‚Ä¢ /create_team <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n" +
			"‚Ä¢ /delete_team <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É\n" +
			"‚Ä¢ /assign_team @username <team_id> ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞\n" +
			"‚Ä¢ /teams ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
			"‚Ä¢ /invite_link <team_id> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
	}
}


func (h *TelegramHandler) handleAthlete(chatID int64, update tgbotapi.Update) {
	args := strings.Fields(update.Message.Text)
	if len(args) != 2 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /athlete <id_–∫–æ–º–∞–Ω–¥—ã>"))
		return
	}

	teamID, err := strconv.Atoi(args[1])
	if err != nil || teamID <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	team, err := h.Repo.GetTeamByID(teamID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: "+err.Error()))
		return
	}

	existing, _ := h.Repo.GetUserByID(chatID)
	if existing != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
			fmt.Sprintf("‚ÑπÔ∏è –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ %s.", existing.Role)))
		return
	}

	name := update.Message.From.FirstName
	username := update.Message.From.UserName

	user := &domain.User{
		ID:       chatID,
		Name:     name,
		Username: username,
		Role:     domain.RoleAthlete,
	}

	err = h.Repo.RegisterUser(user)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error()))
		return
	}

	err = h.Repo.AssignUserToTeam(chatID, team.ID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
		fmt.Sprintf("‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ '%s'.", team.Name)))
}


func (h *TelegramHandler) handleCoach(chatID int64, update tgbotapi.Update) {
	providedKey := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/coach "))
	if providedKey != h.SecretCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á."))
		return
	}

	user, _ := h.Repo.GetUserByID(chatID)
	if user != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ "+string(user.Role)+"."))
		return
	}

	name := update.Message.From.FirstName
	username := update.Message.From.UserName
	err := h.Repo.RegisterUser(&domain.User{
		ID:       chatID,
		Name:     name,
		Username: username,
		Role:     domain.RoleCoach,
	})
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: "+err.Error()))
	} else {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä."))
	}
}

func (h *TelegramHandler) handleRanking(chatID int64, user *domain.User, text string) {
	if user == nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start."))
		return
	}

	var (
		teamID   int
		teamName string
	)

	if strings.Contains(text, "team:") {
		parts := strings.Fields(text)
		for _, part := range parts {
			if strings.HasPrefix(part, "team:") {
				idStr := strings.TrimPrefix(part, "team:")
				id, err := strconv.Atoi(idStr)
				if err == nil {
					teamID = id
				}
			}
		}
	}

	var ranking []domain.ScoreEntry
	var err error

	if teamID > 0 {
		team, errTeam := h.Repo.GetTeamByID(teamID)
		if errTeam != nil {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
			return
		}
		teamName = team.Name

		ranking, err = h.Repo.GetRankingByTeam(teamID)
	} else {
		ranking, err = h.Repo.GetRanking()
	}

	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: "+err.Error()))
		return
	}

	if len(ranking) == 0 {
		msg := "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."
		if teamID > 0 {
			msg = fmt.Sprintf("–í –∫–æ–º–∞–Ω–¥–µ %s –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —Å –±–∞–ª–ª–∞–º–∏.", teamName)
		}
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
		return
	}

	title := "üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n"
	if teamID > 0 {
		title = fmt.Sprintf("üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã %s:\n", teamName)
	}

	msg := title
	var userRankText string
	for i, r := range ranking {
		msg += fmt.Sprintf("%d. %s (@%s) ‚Äî %d –±–∞–ª–ª–æ–≤\n", i+1, r.Name, r.Username, r.Score)
		if r.UserID == chatID {
			userRankText = fmt.Sprintf("\nüìç –¢—ã –Ω–∞ %d –º–µ—Å—Ç–µ —Å %d –±–∞–ª–ª–∞–º–∏.", i+1, r.Score)
		}
	}
	msg += userRankText

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}



// handleRequest processes an athlete's points request.
func (h *TelegramHandler) handleRequest(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleAthlete {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–∞–ª–ª—ã."))
		return
	}

	// Parse command: /request <amount> <reason>
	parts := strings.SplitN(text, " ", 3)
	if len(parts) < 2 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /request."))
		return
	}
	if len(parts) < 3 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤."))
		return
	}

	amount, err := strconv.Atoi(parts[1])
	if err != nil || amount <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ –±–æ–ª—å—à–µ –Ω—É–ª—è."))
		return
	}

	reason := strings.TrimSpace(parts[2])
	if reason == "" {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞."))
		return
	}

	err = h.Repo.CreatePendingRequest(chatID, amount, reason)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ %d –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É.", amount)))
}

func (h *TelegramHandler) handlePending(chatID int64, user *domain.User, text string) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	args := strings.Fields(text)
	var teamID *int = nil
	if len(args) == 2 {
		id, err := strconv.Atoi(args[1])
		if err != nil || id <= 0 {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã."))
			return
		}
		teamID = &id
	}

	requests, err := h.Repo.GetPendingRequestsByTeam(teamID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: "+err.Error()))
		return
	}

	if len(requests) == 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."))
		return
	}

	msg := "üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
	for _, req := range requests {
		msg += fmt.Sprintf("ID: %d | üë§ %s (@%s) | ‚ûï %d –±–∞–ª–ª–æ–≤\nüìé %s\n\n",
			req.ID, req.Name, req.Username, req.Amount, req.Reason)
	}
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

// Approves a pending point request
func (h *TelegramHandler) handleApprove(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	idStr := strings.TrimSpace(strings.TrimPrefix(text, "/approve "))
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
		return
	}

	err = h.Repo.ApproveRequest(id)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–ø—Ä–æ—Å #%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.", id)))
}

// Gives points directly to an athlete
func (h *TelegramHandler) handleGive(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."))
		return
	}

	args := strings.SplitN(strings.TrimPrefix(text, "/give "), " ", 3)
	if len(args) < 3 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /give <–±–∞–ª–ª—ã> @–∏–º—è <–ø—Ä–∏—á–∏–Ω–∞>"))
		return
	}

	amount, err := strconv.Atoi(args[0])
	if err != nil || amount <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤."))
		return
	}

	username := strings.TrimPrefix(args[1], "@")
	reason := strings.TrimSpace(args[2])

	err = h.Repo.GivePoints(username, amount, reason)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	msg := fmt.Sprintf("‚úÖ %d –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @%s.\nüìé %s", amount, username, reason)
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

// Updated handler for listing athletes with optional team ID
func (h *TelegramHandler) handleAthletes(chatID int64, user *domain.User, text string) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	args := strings.Fields(text)
	var (
		teamID *int = nil
		athletes []domain.AthleteShort
		err error
	)

	if len(args) == 2 {
		id, convErr := strconv.Atoi(args[1])
		if convErr != nil || id <= 0 {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã."))
			return
		}
		teamID = &id
	}

	athletes, err = h.Repo.ListAthletesByTeam(teamID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: "+err.Error()))
		return
	}

	if len(athletes) == 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üì≠ –í —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤."))
		return
	}

	msg := "üìã –°–ø–∏—Å–æ–∫ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n\n"
	for _, a := range athletes {
		msg += fmt.Sprintf("‚Ä¢ @%s (%s)\n", a.Username, a.Name)
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

func (h *TelegramHandler) handleReject(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	idStr := strings.TrimSpace(strings.TrimPrefix(text, "/reject "))
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞."))
		return
	}

	fromID, err := h.Repo.RejectRequest(id)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "+err.Error()))
		return
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—É
	util.SafeSend(h.Bot, tgbotapi.NewMessage(fromID, fmt.Sprintf("üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å #%d –Ω–∞ –±–∞–ª–ª—ã –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º.", id)))

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å #%d –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.", id)))
}

func (h *TelegramHandler) handleHistory(chatID int64, text string, user *domain.User) {
	if user == nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
		return
	}

	args := strings.Fields(text)
	var targetID int64
	var targetName string
	var targetUser *domain.User

	if len(args) == 1 {
		if user.Role != domain.RoleAthlete {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –¢—Ä–µ–Ω–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å @username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞."))
			return
		}
		targetID = chatID
		targetUser = user
	} else if len(args) == 2 && user.Role == domain.RoleCoach {
		username := strings.TrimPrefix(args[1], "@")
		var err error
		targetUser, err = h.Repo.GetUserByUsername(username)
		if err != nil || targetUser == nil || targetUser.Role != domain.RoleAthlete {
			util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –°–ø–æ—Ä—Ç—Å–º–µ–Ω —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω."))
			return
		}
		targetID = targetUser.ID
		targetName = targetUser.Username
	} else {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /history –∏–ª–∏ /history @username (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞)"))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
	history, err := h.Repo.GetUserHistory(targetID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: "+err.Error()))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	teamName := ""
	if targetUser != nil {
		teamName, err = h.Repo.GetUserTeamName(targetUser.ID)
		if err != nil {
			teamName = ""
		}
	}

	if len(history) == 0 {
		msg := "üì≠ –ù–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π."
		if user.Role == domain.RoleCoach && targetID != chatID {
			msg = fmt.Sprintf("üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.", targetName)
		}
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
		return
	}

	msg := "üìú –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π"
	if teamName != "" {
		msg += fmt.Sprintf(" (–∫–æ–º–∞–Ω–¥–∞: %s)", teamName)
	}
	msg += ":\n\n"

	for _, entry := range history {
		msg += fmt.Sprintf("‚Ä¢ ‚ûï %d –±–∞–ª–ª–æ–≤ ‚Äî %s\n", entry.Amount, entry.Reason)
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}


func (h *TelegramHandler) handleMyScore(chatID int64, user *domain.User) {
	if user == nil || user.Role != domain.RoleAthlete {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º."))
		return
	}

	score, err := h.Repo.GetUserScore(chatID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á—ë—Ç–∞: "+err.Error()))
		return
	}

	teamID, err := h.Repo.GetUserTeamID(chatID)
	if err != nil || teamID == 0 {
		msg := fmt.Sprintf("üèÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: %d –±–∞–ª–ª–æ–≤\n\nüìå –¢—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.", score)
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–º–∞–Ω–¥–µ
	ranking, err := h.Repo.GetRankingByTeam(teamID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã: "+err.Error()))
		return
	}

	place := -1
	for i, entry := range ranking {
		if entry.UserID == chatID {
			place = i + 1
			break
		}
	}

	msg := fmt.Sprintf("üèÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: %d –±–∞–ª–ª–æ–≤", score)
	if place > 0 {
		msg += fmt.Sprintf("\nüìä –¢—ã –Ω–∞ %d –º–µ—Å—Ç–µ –≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ.", place)
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}


func (h *TelegramHandler) handleTeams(chatID int64, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	teams, err := h.Repo.ListTeams()
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: "+err.Error()))
		return
	}

	if len(teams) == 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	msg := "üì¶ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
	for _, t := range teams {
		msg += fmt.Sprintf("‚Ä¢ %s (ID: %d)\n", t.Name, t.ID)
	}
	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, msg))
}

func (h *TelegramHandler) handleInviteLink(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."))
		return
	}

	args := strings.Fields(text)
	if len(args) != 2 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /invite_link <team_id>"))
		return
	}

	teamID, err := strconv.Atoi(args[1])
	if err != nil || teamID <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π team_id."))
		return
	}

	link := fmt.Sprintf("https://t.me/%s?start=team_%d", h.Bot.Self.UserName, teamID)

	msg := fmt.Sprintf("üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É #%d:\n%s", teamID, link)

	button := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", link),
		),
	)

	message := tgbotapi.NewMessage(chatID, msg)
	message.ReplyMarkup = button

	util.SafeSend(h.Bot, message)
}


func (h *TelegramHandler) handleCreateTeam(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	args := strings.Fields(text)
	if len(args) <= 2 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /create_team <–Ω–∞–∑–≤–∞–Ω–∏–µ>"))
		return
	}

	name := strings.Join(args[1:], " ")
	err := h.Repo.CreateTeam(name)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ö–æ–º–∞–Ω–¥–∞ \"%s\" —Å–æ–∑–¥–∞–Ω–∞.", name)))
}

func (h *TelegramHandler) handleDeleteTeam(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	args := strings.Fields(text)
	if len(args) != 2 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /delete_team <id –∫–æ–º–∞–Ω–¥—ã>"))
		return
	}

	teamID, err := strconv.Atoi(args[1])
	if err != nil || teamID <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π team_id."))
		return
	}
	err = h.Repo.DeleteTeam(teamID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, fmt.Sprintf("üóë –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞.")))
}

func (h *TelegramHandler) handleAssignTeam(chatID int64, text string, user *domain.User) {
	if user == nil || user.Role != domain.RoleCoach {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "üö´ –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∫–æ–º–∞–Ω–¥—É."))
		return
	}

	args := strings.Fields(text)
	if len(args) <= 3 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –§–æ—Ä–º–∞—Ç: /assign_team @username <team_id>"))
		return
	}

	username := strings.TrimPrefix(args[1], "@")
	teamID, err := strconv.Atoi(args[2])
	if err != nil || teamID <= 0 {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π team_id."))
		return
	}

	athlete, err := h.Repo.GetUserByUsername(username)
	if err != nil || athlete == nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
		return
	}
	if athlete.Role != domain.RoleAthlete {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –¢–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	err = h.Repo.AssignUserToTeam(athlete.ID, teamID)
	if err != nil {
		util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: "+err.Error()))
		return
	}

	util.SafeSend(h.Bot, tgbotapi.NewMessage(chatID,
		fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É #%d.", username, teamID)))
}
